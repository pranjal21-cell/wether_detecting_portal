<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <style>
        * {
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 0;
        }
        
        body {
            background: linear-gradient(135deg, #72edf2 10%, #5151e5 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }
        
        .container {
            background-color: rgba(255, 255, 255, 0.9);
            border-radius: 16px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 450px;
            padding: 25px;
            text-align: center;
        }
        
        .search-box {
            display: flex;
            width: 100%;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 20px;
        }
        
        .search-box input {
            border: none;
            outline: none;
            background: #ebfffc;
            color: #555;
            padding: 12px 25px;
            height: 50px;
            border-radius: 30px;
            flex: 1;
            margin-right: 16px;
            font-size: 16px;
        }
        
        .search-box button {
            border: none;
            outline: none;
            background: #ebfffc;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            cursor: pointer;
        }
        
        .weather-icon {
            width: 120px;
            margin: 20px 0;
        }
        
        .temperature {
            font-size: 48px;
            font-weight: 500;
            margin: 10px 0;
        }
        
        .city {
            font-size: 32px;
            font-weight: 400;
            margin-bottom: 20px;
        }
        
        .details {
            display: flex;
            justify-content: space-between;
            padding: 0 20px;
            margin-top: 30px;
        }
        
        .col {
            display: flex;
            align-items: center;
            text-align: left;
        }
        
        .col img {
            width: 30px;
            margin-right: 10px;
        }
        
        .error {
            color: red;
            margin-top: 20px;
            display: none;
        }
        
        .location-btn {
            background: #5151e5;
            color: white;
            border: none;
            padding: 12px 20px;
            border-radius: 30px;
            margin-top: 20px;
            cursor: pointer;
            font-size: 16px;
            width: 100%;
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="search-box">
            <input type="text" placeholder="Enter city name" id="city-input" value="London">
            <button id="search-btn">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="#555" stroke-width="2">
                    <circle cx="11" cy="11" r="8"></circle>
                    <line x1="21" y1="21" x2="16.65" y2="16.65"></line>
                </svg>
            </button>
        </div>
        <button class="location-btn" id="location-btn">Use My Location</button>
        <p class="error" id="error-message"></p>

        <div id="weather-info">
            <img src="" class="weather-icon" id="weather-icon">
            <div class="temperature" id="temperature">24°C</div>
            <div class="city" id="city-name">London</div>
            <div class="details">
                <div class="col">
                    <img src="https://cdn-icons-png.flaticon.com/512/1585/1585259.png" alt="Humidity">
                    <div>
                        <div id="humidity">64%</div>
                        <div>Humidity</div>
                    </div>
                </div>
                <div class="col">
                    <img src="https://cdn-icons-png.flaticon.com/512/172/172922.png" alt="Wind">
                    <div>
                        <div id="wind">12 km/h</div>
                        <div>Wind Speed</div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Default weather data (will show if API fails)
        const defaultWeather = {
            name: "London",
            main: {
                temp: 24,
                humidity: 64
            },
            wind: {
                speed: 12
            },
            weather: [{
                icon: "01d"
            }]
        };

        // Display default weather on load
        displayWeather(defaultWeather);

        // API Configuration
        const apiKey = 'b17cb6093b0874fcfa11ad9bf68abe06'; // Free tier key (may be rate limited)

        // DOM Elements
        const cityInput = document.getElementById('city-input');
        const searchBtn = document.getElementById('search-btn');
        const locationBtn = document.getElementById('location-btn');
        const errorMessage = document.getElementById('error-message');
        const weatherInfo = document.getElementById('weather-info');

        // Weather Display Elements
        const cityName = document.getElementById('city-name');
        const temperature = document.getElementById('temperature');
        const humidity = document.getElementById('humidity');
        const wind = document.getElementById('wind');
        const weatherIcon = document.getElementById('weather-icon');

        // Weather Icon Mapping
        const iconMap = {
            '01d': 'https://cdn-icons-png.flaticon.com/512/3222/3222807.png', // clear sky (day)
            '01n': 'https://cdn-icons-png.flaticon.com/512/3222/3222807.png', // clear sky (night)
            '02d': 'https://cdn-icons-png.flaticon.com/512/1163/1163661.png', // few clouds (day)
            '02n': 'https://cdn-icons-png.flaticon.com/512/1163/1163661.png', // few clouds (night)
            '03d': 'https://cdn-icons-png.flaticon.com/512/1163/1163634.png', // scattered clouds
            '03n': 'https://cdn-icons-png.flaticon.com/512/1163/1163634.png', // scattered clouds
            '04d': 'https://cdn-icons-png.flaticon.com/512/1163/1163634.png', // broken clouds
            '04n': 'https://cdn-icons-png.flaticon.com/512/1163/1163634.png', // broken clouds
            '09d': 'https://cdn-icons-png.flaticon.com/512/1163/1163667.png', // shower rain
            '09n': 'https://cdn-icons-png.flaticon.com/512/1163/1163667.png', // shower rain
            '10d': 'https://cdn-icons-png.flaticon.com/512/1163/1163675.png', // rain (day)
            '10n': 'https://cdn-icons-png.flaticon.com/512/1163/1163675.png', // rain (night)
            '11d': 'https://cdn-icons-png.flaticon.com/512/1163/1163657.png', // thunderstorm
            '11n': 'https://cdn-icons-png.flaticon.com/512/1163/1163657.png', // thunderstorm
            '13d': 'https://cdn-icons-png.flaticon.com/512/1163/1163651.png', // snow
            '13n': 'https://cdn-icons-png.flaticon.com/512/1163/1163651.png', // snow
            '50d': 'https://cdn-icons-png.flaticon.com/512/1163/1163639.png', // mist
            '50n': 'https://cdn-icons-png.flaticon.com/512/1163/1163639.png' // mist
        };

        // Display weather data
        function displayWeather(data) {
            errorMessage.style.display = 'none';
            weatherInfo.style.display = 'block';

            cityName.textContent = data.name;
            temperature.textContent = `${Math.round(data.main.temp)}°C`;
            humidity.textContent = `${data.main.humidity}%`;
            wind.textContent = `${data.wind.speed} km/h`;

            const iconCode = data.weather[0].icon;
            weatherIcon.src = iconMap[iconCode] || iconMap['01d'];
        }

        // Show error message
        function showError(message) {
            errorMessage.textContent = message;
            errorMessage.style.display = 'block';
            weatherInfo.style.display = 'none';
        }

        // Fetch weather by city name
        async function fetchWeather(city) {
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${apiKey}`
                );

                const data = await response.json();

                if (data.cod === 200) {
                    displayWeather(data);
                } else {
                    throw new Error(data.message || 'City not found');
                }
            } catch (error) {
                showError(error.message);
                // Show default weather if API fails
                displayWeather(defaultWeather);
            }
        }

        // Fetch weather by geolocation
        async function fetchWeatherByCoords(lat, lon) {
            try {
                const response = await fetch(
                    `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${apiKey}`
                );

                const data = await response.json();

                if (data.cod === 200) {
                    displayWeather(data);
                } else {
                    throw new Error(data.message || 'Location not found');
                }
            } catch (error) {
                showError(error.message);
                // Show default weather if API fails
                displayWeather(defaultWeather);
            }
        }

        // Event listeners
        searchBtn.addEventListener('click', () => {
            const city = cityInput.value.trim();
            if (city) {
                fetchWeather(city);
            } else {
                showError('Please enter a city name');
            }
        });

        cityInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const city = cityInput.value.trim();
                if (city) {
                    fetchWeather(city);
                } else {
                    showError('Please enter a city name');
                }
            }
        });

        locationBtn.addEventListener('click', () => {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(
                    (position) => {
                        const {
                            latitude,
                            longitude
                        } = position.coords;
                        fetchWeatherByCoords(latitude, longitude);
                    },
                    (error) => {
                        showError('Location access denied. Using default weather.');
                        displayWeather(defaultWeather);
                    }
                );
            } else {
                showError('Geolocation not supported. Using default weather.');
                displayWeather(defaultWeather);
            }
        });
    </script>
</body>

</html>
